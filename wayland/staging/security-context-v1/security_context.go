// Generated by go-wayland-scanner
// https://github.com/yaslama/go-wayland/cmd/go-wayland-scanner
// XML file : https://gitlab.freedesktop.org/wayland/wayland-protocols/-/raw/1.41/staging/security-context/security-context-v1.xml
//
// security_context_v1 Protocol Copyright:
//
// Copyright Â© 2021 Simon Ser
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice (including the next
// paragraph) shall be included in all copies or substantial portions of the
// Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

package security_context

import (
	"github.com/yaslama/go-wayland/wayland/client"
	"golang.org/x/sys/unix"
)

// WpSecurityContextManagerInterfaceName is the name of the interface as it appears in the [client.Registry].
// It can be used to match the [client.RegistryGlobalEvent.Interface] in the
// [Registry.SetGlobalHandler] and can be used in [Registry.Bind] if this applies.
const WpSecurityContextManagerInterfaceName = "wp_security_context_manager_v1"

// WpSecurityContextManager : client security context manager
//
// This interface allows a client to register a new Wayland connection to
// the compositor and attach a security context to it.
//
// This is intended to be used by sandboxes. Sandbox engines attach a
// security context to all connections coming from inside the sandbox. The
// compositor can then restrict the features that the sandboxed connections
// can use.
//
// Compositors should forbid nesting multiple security contexts by not
// exposing wp_security_context_manager_v1 global to clients with a security
// context attached, or by sending the nested protocol error. Nested
// security contexts are dangerous because they can potentially allow
// privilege escalation of a sandboxed client.
//
// Warning! The protocol described in this file is currently in the testing
// phase. Backward compatible changes may be added together with the
// corresponding interface version bump. Backward incompatible changes can
// only be done by creating a new major version of the extension.
type WpSecurityContextManager struct {
	client.BaseProxy
}

// NewWpSecurityContextManager : client security context manager
//
// This interface allows a client to register a new Wayland connection to
// the compositor and attach a security context to it.
//
// This is intended to be used by sandboxes. Sandbox engines attach a
// security context to all connections coming from inside the sandbox. The
// compositor can then restrict the features that the sandboxed connections
// can use.
//
// Compositors should forbid nesting multiple security contexts by not
// exposing wp_security_context_manager_v1 global to clients with a security
// context attached, or by sending the nested protocol error. Nested
// security contexts are dangerous because they can potentially allow
// privilege escalation of a sandboxed client.
//
// Warning! The protocol described in this file is currently in the testing
// phase. Backward compatible changes may be added together with the
// corresponding interface version bump. Backward incompatible changes can
// only be done by creating a new major version of the extension.
func NewWpSecurityContextManager(ctx *client.Context) *WpSecurityContextManager {
	wpSecurityContextManagerV1 := &WpSecurityContextManager{}
	ctx.Register(wpSecurityContextManagerV1)
	return wpSecurityContextManagerV1
}

// Destroy : destroy the manager object
//
// Destroy the manager. This doesn't destroy objects created with the
// manager.
func (i *WpSecurityContextManager) Destroy() error {
	defer i.Context().Unregister(i)
	const opcode = 0
	const _reqBufLen = 8
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

// CreateListener : create a new security context
//
// Creates a new security context with a socket listening FD.
//
// The compositor will accept new client connections on listen_fd.
// listen_fd must be ready to accept new connections when this request is
// sent by the client. In other words, the client must call bind(2) and
// listen(2) before sending the FD.
//
// close_fd is a FD that will signal hangup when the compositor should stop
// accepting new connections on listen_fd.
//
// The compositor must continue to accept connections on listen_fd when
// the Wayland client which created the security context disconnects.
//
// After sending this request, closing listen_fd and close_fd remains the
// only valid operation on them.
//
//	listenFd: listening socket FD
//	closeFd: FD signaling when done
func (i *WpSecurityContextManager) CreateListener(listenFd, closeFd int) (*WpSecurityContext, error) {
	id := NewWpSecurityContext(i.Context())
	const opcode = 1
	const _reqBufLen = 8 + 4
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], id.ID())
	l += 4
	oob := unix.UnixRights(int(listenFd), int(closeFd))
	err := i.Context().WriteMsg(_reqBuf[:], oob)
	return id, err
}

type WpSecurityContextManagerError uint32

// WpSecurityContextManagerError :
const (
	// WpSecurityContextManagerErrorInvalidListenFd : listening socket FD is invalid
	WpSecurityContextManagerErrorInvalidListenFd WpSecurityContextManagerError = 1
	// WpSecurityContextManagerErrorNested : nested security contexts are forbidden
	WpSecurityContextManagerErrorNested WpSecurityContextManagerError = 2
)

func (e WpSecurityContextManagerError) Name() string {
	switch e {
	case WpSecurityContextManagerErrorInvalidListenFd:
		return "invalid_listen_fd"
	case WpSecurityContextManagerErrorNested:
		return "nested"
	default:
		return ""
	}
}

func (e WpSecurityContextManagerError) Value() string {
	switch e {
	case WpSecurityContextManagerErrorInvalidListenFd:
		return "1"
	case WpSecurityContextManagerErrorNested:
		return "2"
	default:
		return ""
	}
}

func (e WpSecurityContextManagerError) String() string {
	return e.Name() + "=" + e.Value()
}

// WpSecurityContextInterfaceName is the name of the interface as it appears in the [client.Registry].
// It can be used to match the [client.RegistryGlobalEvent.Interface] in the
// [Registry.SetGlobalHandler] and can be used in [Registry.Bind] if this applies.
const WpSecurityContextInterfaceName = "wp_security_context_v1"

// WpSecurityContext : client security context
//
// The security context allows a client to register a new client and attach
// security context metadata to the connections.
//
// When both are set, the combination of the application ID and the sandbox
// engine must uniquely identify an application. The same application ID
// will be used across instances (e.g. if the application is restarted, or
// if the application is started multiple times).
//
// When both are set, the combination of the instance ID and the sandbox
// engine must uniquely identify a running instance of an application.
type WpSecurityContext struct {
	client.BaseProxy
}

// NewWpSecurityContext : client security context
//
// The security context allows a client to register a new client and attach
// security context metadata to the connections.
//
// When both are set, the combination of the application ID and the sandbox
// engine must uniquely identify an application. The same application ID
// will be used across instances (e.g. if the application is restarted, or
// if the application is started multiple times).
//
// When both are set, the combination of the instance ID and the sandbox
// engine must uniquely identify a running instance of an application.
func NewWpSecurityContext(ctx *client.Context) *WpSecurityContext {
	wpSecurityContextV1 := &WpSecurityContext{}
	ctx.Register(wpSecurityContextV1)
	return wpSecurityContextV1
}

// Destroy : destroy the security context object
//
// Destroy the security context object.
func (i *WpSecurityContext) Destroy() error {
	defer i.Context().Unregister(i)
	const opcode = 0
	const _reqBufLen = 8
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

// SetSandboxEngine : set the sandbox engine
//
// Attach a unique sandbox engine name to the security context. The name
// should follow the reverse-DNS style (e.g. "org.flatpak").
//
// A list of well-known engines is maintained at:
// https://gitlab.freedesktop.org/wayland/wayland-protocols/-/blob/main/staging/security-context/engines.md
//
// It is a protocol error to call this request twice. The already_set
// error is sent in this case.
//
//	name: the sandbox engine name
func (i *WpSecurityContext) SetSandboxEngine(name string) error {
	const opcode = 1
	nameLen := client.PaddedLen(len(name) + 1)
	_reqBufLen := 8 + (4 + nameLen)
	_reqBuf := make([]byte, _reqBufLen)
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutString(_reqBuf[l:l+(4+nameLen)], name, nameLen)
	l += (4 + nameLen)
	err := i.Context().WriteMsg(_reqBuf, nil)
	return err
}

// SetAppId : set the application ID
//
// Attach an application ID to the security context.
//
// The application ID is an opaque, sandbox-specific identifier for an
// application. See the well-known engines document for more details:
// https://gitlab.freedesktop.org/wayland/wayland-protocols/-/blob/main/staging/security-context/engines.md
//
// The compositor may use the application ID to group clients belonging to
// the same security context application.
//
// Whether this request is optional or not depends on the sandbox engine used.
//
// It is a protocol error to call this request twice. The already_set
// error is sent in this case.
//
//	appId: the application ID
func (i *WpSecurityContext) SetAppId(appId string) error {
	const opcode = 2
	appIdLen := client.PaddedLen(len(appId) + 1)
	_reqBufLen := 8 + (4 + appIdLen)
	_reqBuf := make([]byte, _reqBufLen)
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutString(_reqBuf[l:l+(4+appIdLen)], appId, appIdLen)
	l += (4 + appIdLen)
	err := i.Context().WriteMsg(_reqBuf, nil)
	return err
}

// SetInstanceId : set the instance ID
//
// Attach an instance ID to the security context.
//
// The instance ID is an opaque, sandbox-specific identifier for a running
// instance of an application. See the well-known engines document for
// more details:
// https://gitlab.freedesktop.org/wayland/wayland-protocols/-/blob/main/staging/security-context/engines.md
//
// Whether this request is optional or not depends on the sandbox engine used.
//
// It is a protocol error to call this request twice. The already_set
// error is sent in this case.
//
//	instanceId: the instance ID
func (i *WpSecurityContext) SetInstanceId(instanceId string) error {
	const opcode = 3
	instanceIdLen := client.PaddedLen(len(instanceId) + 1)
	_reqBufLen := 8 + (4 + instanceIdLen)
	_reqBuf := make([]byte, _reqBufLen)
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutString(_reqBuf[l:l+(4+instanceIdLen)], instanceId, instanceIdLen)
	l += (4 + instanceIdLen)
	err := i.Context().WriteMsg(_reqBuf, nil)
	return err
}

// Commit : register the security context
//
// Atomically register the new client and attach the security context
// metadata.
//
// If the provided metadata is inconsistent or does not match with out of
// band metadata (see
// https://gitlab.freedesktop.org/wayland/wayland-protocols/-/blob/main/staging/security-context/engines.md),
// the invalid_metadata error may be sent eventually.
//
// It's a protocol error to send any request other than "destroy" after
// this request. In this case, the already_used error is sent.
func (i *WpSecurityContext) Commit() error {
	const opcode = 4
	const _reqBufLen = 8
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

type WpSecurityContextError uint32

// WpSecurityContextError :
const (
	// WpSecurityContextErrorAlreadyUsed : security context has already been committed
	WpSecurityContextErrorAlreadyUsed WpSecurityContextError = 1
	// WpSecurityContextErrorAlreadySet : metadata has already been set
	WpSecurityContextErrorAlreadySet WpSecurityContextError = 2
	// WpSecurityContextErrorInvalidMetadata : metadata is invalid
	WpSecurityContextErrorInvalidMetadata WpSecurityContextError = 3
)

func (e WpSecurityContextError) Name() string {
	switch e {
	case WpSecurityContextErrorAlreadyUsed:
		return "already_used"
	case WpSecurityContextErrorAlreadySet:
		return "already_set"
	case WpSecurityContextErrorInvalidMetadata:
		return "invalid_metadata"
	default:
		return ""
	}
}

func (e WpSecurityContextError) Value() string {
	switch e {
	case WpSecurityContextErrorAlreadyUsed:
		return "1"
	case WpSecurityContextErrorAlreadySet:
		return "2"
	case WpSecurityContextErrorInvalidMetadata:
		return "3"
	default:
		return ""
	}
}

func (e WpSecurityContextError) String() string {
	return e.Name() + "=" + e.Value()
}
